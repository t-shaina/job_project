#ifndef TEMPLATE_QUERY_H
#define TEMPLATE_QUERY_H

#include <QObject>

enum Query_id{entry_id=0, delete_id=1, select_id=2, insert_id=3, registration_id=4, select_all_id=5, update_id=6};

class Template_response:public QObject
{
    Q_OBJECT
public:
    Template_query();
    virtual ~Template_response();
    virtual  void process_request(QString result, QStringList* data)=0;
    static void create_specific_query(Template_response* template_query, Query_id  id);
    //static QStringList decoding_message(const QString& message);
    static QString encoding_message(const QStringList* data);

};
class Entry_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Delete_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Select_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Insert_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Registration_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Select_all_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
class Update_query:public Template_query{
    Q_OBJECT
private:
    void process_request(QString result, QStringList* data);
};
#endif // TEMPLATE_QUERY_H
